#include <iostream>
#include <vector>
using namespace std;

#define N 16 // Board size for 16 queens

// Function to check if it's safe to place a queen at board[row][col]
bool isSafe(vector<vector<int>>& board, int row, int col) {
    // Check this column on upper rows
    for (int i = 0; i < row; i++)
        if (board[i][col] == 1) return false;

    // Check upper-left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j] == 1) return false;

    // Check upper-right diagonal
    for (int i = row, j = col; i >= 0 && j < N; i--, j++)
        if (board[i][j] == 1) return false;

    return true;
}

// Function to solve the N-Queens problem
bool solveNQueens(vector<vector<int>>& board, int row) {
    if (row == N) return true; // All queens placed

    for (int col = 0; col < N; col++) {
        if (isSafe(board, row, col)) {
            board[row][col] = 1; // Place queen
            if (solveNQueens(board, row + 1)) return true;
            board[row][col] = 0; // Backtrack
        }
    }
    return false;
}

int main() {
    vector<vector<int>> board(N, vector<int>(N, 0)); // Initialize 16x16 board with 0

    if (solveNQueens(board, 0)) {
        // Print the board
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cout << (board[i][j] ? "Q " : ". ");
            }
            cout << endl;
        }
    } else {
        cout << "No solution exists for 16 queens." << endl;
    }

    return 0;
}
